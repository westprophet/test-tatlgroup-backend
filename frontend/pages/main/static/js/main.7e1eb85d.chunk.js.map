{"version":3,"sources":["config/api.config.ts","api/schoolboysAPI.ts","api/columnsAPI.ts","api/rateAPI.ts","components/SchoolTableContainer/SchoolTableContainer.tsx","components/SchoolTableContainer/index.ts","App.tsx","reportWebVitals.ts","store/reducers/schoolboysReducer.ts","store/reducers/columnsReducer.ts","store/reducers/rateReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["config","baseApiURL","getSchoolboys","a","axios","get","r","data","Promise","reject","message","getColumns","getRate","schoolboy_id","params","SchoolboyId","column_id","post","ColumnId","res","status","Title","createRow","number","schoolboy","rate","columns","name","FirstName","SecondName","LastName","id","Id","String","forEach","column","rt","find","createStyles","makeStyles","root","width","container","maxHeight","cell","transition","cursor","backgroundColor","color","rightLine","borderRight","staticColumns","label","minWidth","SchoolTableContainer","React","useState","load","setLoad","tableData","setTableData","timer","useRef","reload","columnsData","rateData","schoolboysData","rows","Items","map","sb","index","filter","i","align","undefined","classes","useEffect","then","current","setInterval","console","log","clearInterval","page","setPage","rowsPerPage","setRowsPerPage","style","lineHeight","_rows","slice","onClickCell","row","unRate","addRate","Paper","className","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","TableBody","hover","role","tabIndex","value","staticColumn","cn","onClick","format","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","event","newPage","onChangeRowsPerPage","target","App","Fragment","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","types","init","appReducer","combineReducers","schoolboys","state","action","type","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e1eb85d.chunk.js","sourcesContent":["export const config = {\r\n    \"version\": \"v1\",\r\n    \"domain\": \"https://tatl-test.redw.me\",\r\n    \"port\": '',\r\n\r\n    //Ключь поставил пока сюда.\r\n    // По хорошему ему надо быть в другом месте например в profileReducer\r\n    \"class_key\": 1,\r\n};\r\nexport const baseApiURL = `${config.domain}:${config.port}/${config.version}/${config.class_key}`;\r\n","import axios from 'axios';\r\n\r\nimport {baseApiURL} from '../config/api.config';\r\nimport ISchoolboy from \"../interfaces/ISchoolboy\";\r\n\r\nexport async function getSchoolboys(): Promise<{\r\n    Items: Array<ISchoolboy>;\r\n    Quantity: number;\r\n}> {\r\n    try {\r\n        const r =  await axios.get(`${baseApiURL}/schoolboys`);\r\n        return r.data;\r\n    } catch (err) {\r\n        return Promise.reject(err.message);\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {baseApiURL} from '../config/api.config';\r\nimport IColumn from \"../interfaces/IColumn\";\r\n\r\nexport async function getColumns(): Promise<{\r\n    Items: Array<IColumn>;\r\n    Quantity: number;\r\n}> {\r\n    try {\r\n        const r =  await axios.get(`${baseApiURL}/column`);\r\n        return r.data;\r\n    } catch (err) {\r\n        return Promise.reject(err.message);\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {baseApiURL} from '../config/api.config';\r\nimport IRate from \"../interfaces/IRate\";\r\n\r\n// Получение всех пропусков\r\nexport async function getRate(schoolboy_id=null): Promise<{\r\n    Items: Array<IRate>;\r\n    Quantity: number;\r\n}> {\r\n    try {\r\n        const r =  await axios.get(`${baseApiURL}/rate`,{\r\n            params: {\r\n                SchoolboyId: schoolboy_id\r\n            },\r\n        });\r\n        return r.data;\r\n    } catch (err) {\r\n        return Promise.reject(err.message);\r\n    }\r\n}\r\n\r\n//Удаление пропуска по ученику\r\n//Сервер должен возвращать статус\r\nexport async function unRate(schoolboy_id: string, column_id: string): Promise<number> {\r\n    try {\r\n       const res =  await axios.post(`${baseApiURL}/UnRate`,{\r\n            SchoolboyId: schoolboy_id,\r\n            ColumnId: column_id\r\n        });\r\n       return res.status;\r\n    } catch (err) {\r\n        return Promise.reject(err.message);\r\n    }\r\n}\r\n\r\n\r\n//Выставление пропуска по ученику\r\n//Сервер должен возвращать статус\r\nexport async function addRate(schoolboy_id:string, column_id: string): Promise<number> {\r\n    try {\r\n        const res = await axios.post(`${baseApiURL}/rate`,{\r\n            SchoolboyId: schoolboy_id,\r\n            ColumnId: column_id,\r\n            Title: 'H'\r\n        });\r\n        return res.status;\r\n    } catch (err) {\r\n        return Promise.reject(err.message);\r\n    }\r\n}\r\n","import React, {useEffect, useRef} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport {IColumn, IRate, ISchoolboy} from \"../../interfaces/\";\r\nimport cn from \"classnames\";\r\n\r\nimport {getSchoolboys} from \"../../api/schoolboysAPI\";\r\nimport {getColumns} from \"../../api/columnsAPI\";\r\nimport {addRate, getRate, unRate} from \"../../api/rateAPI\";\r\n\r\n\r\ninterface TableColumn {\r\n    column_id: string;\r\n    name: string;\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right' | 'center';\r\n    format?: (value: number) => string;\r\n}\r\n\r\ninterface TableData {\r\n    [c: string]: string;\r\n}\r\n\r\n//Преобразовываем строки в нужный для таблицы вид\r\nfunction createRow(number: number, schoolboy: ISchoolboy, rate: Array<IRate>, columns: IColumn[]): TableData {\r\n    const name = `${schoolboy.FirstName ?? ''} ${schoolboy.SecondName ?? ''}  ${schoolboy.LastName}`;\r\n    const res = {id: schoolboy.Id, number: String(number), name: name};\r\n    columns.forEach((column) => {\r\n        const rt = rate.find((rt) => rt.ColumnId === column.Id);\r\n        // @ts-ignore\r\n        res[column.Title] = rt ? rt.Title : '';\r\n    })\r\n    return res;\r\n}\r\n\r\n//Преобразовываем колонки в нужный для таблицы вид\r\nfunction createRateColumn(column: IColumn): TableColumn {\r\n    return {column_id: column.Id, name: column.Title, label: column.Title, align: 'center'};\r\n}\r\n\r\nconst createStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 'calc(100vh - 60px)',\r\n    },\r\n    cell: {\r\n        transition: '.3s',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            transition: '.3s',\r\n            backgroundColor: \"grey\",\r\n            color: 'white'\r\n        },\r\n    },\r\n    rightLine: {\r\n        borderRight: '1px solid rgba(224, 224, 224, 1)',\r\n    }\r\n});\r\n\r\n\r\nconst staticColumns: TableColumn[] = [\r\n    {\r\n        column_id: \"number\",\r\n        name: 'number',\r\n        label: \"N\",\r\n        minWidth: 20,\r\n    },\r\n    {\r\n        column_id: \"name\",\r\n        name: 'name',\r\n        label: \"Ученик\",\r\n        minWidth: 150,\r\n    }\r\n];\r\n\r\n\r\nexport default function SchoolTableContainer() {\r\n    const [load, setLoad] = React.useState<boolean>(true);\r\n    const [tableData, setTableData] = React.useState<{ columns: TableColumn[], rows: TableData[] } | undefined>();\r\n    const timer = useRef();\r\n    const reload = async () => {\r\n        //Получаем данные\r\n        const columnsData = await getColumns();\r\n        const rateData = await getRate();\r\n        const schoolboysData = await getSchoolboys();\r\n        if (!columnsData || !rateData || !schoolboysData) return;\r\n\r\n        //Фильтруем пропуски по ученику и формируем строки\r\n        const rows = schoolboysData.Items.map((sb, index) => createRow(++index, sb, rateData.Items.filter((rt) => sb.Id === rt.SchoolboyId), columnsData.Items))\r\n        //Формируем колонки и добавляем статические колонки в начало\r\n        const columns = [...staticColumns, ...columnsData.Items.map((i) => createRateColumn(i))];\r\n\r\n        //Обновляем состояние таблицы\r\n        if (columns && rows)\r\n            setTableData({\r\n                columns: columns,\r\n                rows: rows,\r\n            });\r\n        else\r\n            setTableData(undefined);\r\n    }\r\n\r\n    const classes = createStyles();\r\n\r\n    useEffect(() => {\r\n        reload().then(r => {\r\n            //выключаем прелоудер если все загрузилось и создалось корректно\r\n            setLoad(false);\r\n        });\r\n        \r\n        //Запускаем регулярное обновление приложения\r\n        // @ts-ignore\r\n        timer.current = setInterval(()=>{\r\n            reload().then(r => {\r\n                //выключаем прелоудер если все загрузилось и создалось корректно\r\n                console.log('Обновлено')\r\n            });\r\n        },1000)\r\n        return()=>{\r\n            clearInterval(timer.current);\r\n        }\r\n    }, []);\r\n\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(25);\r\n\r\n    if (load)\r\n        return <h1 style={{lineHeight: '100vh'}}> Загрузка... </h1>\r\n    else if (!tableData )\r\n        return <h1 style={{lineHeight: '100vh'}}>Данных нет но вы держитесь! Ну или проверьте сервер</h1>\r\n\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    //Переключатель количества элементов на странице\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    // Можно поставить прелоудер\r\n    const _rows = tableData.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\r\n\r\n\r\n    //При нажатии на ячейку\r\n    const onClickCell = (column: TableColumn, row: TableData) => {\r\n        const value: string = row[column.name];\r\n        if (!value) {\r\n            addRate(row.id, column.column_id).then((r) => {\r\n                if (r === 200) reload().then(() => setLoad(false));\r\n            });\r\n        } else {\r\n            unRate(row.id, column.column_id).then((r) => {\r\n                if (r === 200) reload().then(() => setLoad(false));\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {tableData.columns.map((column) => {\r\n                                if (column.column_id !== 'id')//скрываем id колоеку\r\n                                    return (\r\n                                        <TableCell\r\n                                            key={column.name}\r\n                                            align={column.align}\r\n                                            style={{minWidth: column.minWidth}}\r\n                                        >\r\n                                            {column.label}\r\n                                        </TableCell>\r\n                                    )\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {_rows.map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\r\n                                    {tableData.columns.map((column) => {\r\n                                        const value = row[column.name];\r\n                                        if (column.column_id !== 'id') {//скрываем id колоеку{\r\n                                            const staticColumn = (column.name !== 'name' && column.name !== 'number');\r\n                                            return (\r\n                                                <TableCell\r\n                                                    className={cn({\r\n                                                        [classes.cell]: staticColumn,\r\n                                                        [classes.rightLine]: column.name === 'name'\r\n                                                    })}\r\n                                                    onClick={staticColumn ? () => onClickCell(column, row) : () => {\r\n                                                    }}\r\n                                                    key={column.name}\r\n                                                    align={column.align}\r\n                                                >\r\n                                                    {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                                </TableCell>\r\n                                            );\r\n                                        }\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[25, 100]}\r\n                component=\"div\"\r\n                count={_rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n}\r\n\r\n","import SchoolTableContainer from './SchoolTableContainer'\r\n\r\nexport default SchoolTableContainer;\r\n","import React from 'react';\r\nimport './scss/App.css';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport SchoolTableContainer from  './components/SchoolTableContainer'\r\n// import TestComp from  './components/TestComp'\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <React.Fragment>\r\n                <Container>\r\n                    {/*<TestComp/>*/}\r\n                    <SchoolTableContainer/>\r\n                </Container>\r\n            </React.Fragment>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import ISchoolboy from \"../../interfaces/ISchoolboy\";\r\n\r\nexport const types = {\r\n    SET_SCHOOLBOYS: 'schoolboys/SET_SCHOOLBOYS',\r\n};\r\nconst init:Array<ISchoolboy> = [];\r\n\r\nexport default function schoolboysReducer(state= init, action: { type: any; payload: Array<ISchoolboy>; }) {\r\n    const { type, payload } = action;\r\n    if (type === types.SET_SCHOOLBOYS) {\r\n        return payload;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const actions = {\r\n    setSchoolboys: (items:Array<ISchoolboy>) => ({ type: types.SET_SCHOOLBOYS, payload: items }),\r\n};\r\n","import IColumn from \"../../interfaces/IColumn\";\r\n\r\nexport const types = {\r\n    SET_COLUMN: 'column/SET_COLUMN',\r\n};\r\nconst init:Array<IColumn> = [];\r\n\r\nexport default function columnsReducer(state= init, action: { type: any; payload: Array<IColumn>; }) {\r\n    const { type, payload } = action;\r\n    if (type === types.SET_COLUMN) {\r\n        return payload;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const actions = {\r\n    setRate: (items:Array<IColumn>) => ({ type: types.SET_COLUMN, payload: items }),\r\n};\r\n","import IRate from \"../../interfaces/IRate\";\r\n\r\nexport const types = {\r\n    SET_RATE: 'rate/SET_RATE',\r\n};\r\nconst init:Array<IRate> = [];\r\n\r\nexport default function rateReducer(state= init, action: { type: any; payload: Array<IRate>; }) {\r\n    const { type, payload } = action;\r\n    if (type === types.SET_RATE) {\r\n        return payload;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const actions = {\r\n    setRate: (items:Array<IRate>) => ({ type: types.SET_RATE, payload: items }),\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport schoolboysReducer from './schoolboysReducer';\r\nimport columnsReducer from './columnsReducer';\r\nimport rateReducer from './rateReducer';\r\n\r\nconst appReducer = combineReducers({\r\n    schoolboys: schoolboysReducer,\r\n    rate: rateReducer,\r\n    column: columnsReducer,\r\n});\r\nexport default appReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { Action } from 'redux';\r\n\r\nimport root from './reducers/index';\r\n\r\nconst store = createStore(root, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\nexport type RootState = ReturnType<typeof root>;\r\n\r\nexport type AppThunk<R = any> = ThunkAction<\r\n    R,\r\n    RootState,\r\n    unknown,\r\n    Action<string>\r\n    >;\r\nexport type MyThunkDispatch = ThunkDispatch<RootState, any, Action<any>>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}